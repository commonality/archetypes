{
  "swagger": "2.0",
  "info": {
    "description": "\n<img height=\"100\" width=\"100\" src=\"/archetypes/v1/img/logo-commonalaxy.png.png\" alt=\"OpenAPI 2.0 Business Archetypes\">\nThe `Quantity` archetype represents an amount of something measured according to some standard of measurement.\n## Standards compliance\n<table>\n  <thead>\n    <tr><th>Standard</th><th>Contents</th></tr>\n  </thead>\n  <tfoot>\n  </tfoot>\n  <tbody>\n    <tr>\n      <td><a href=\"http://www.bipm.org/en/measurement-units/\">SI</a></td>\n      <td>International System of Units&mdash;Bureau International des Poids et Mesures (BIPM).</td>\n    </tr>\n    <tr>\n      <td><a href=\"http://cldr.unicode.org/\">Unicode CLDR</a></td>\n      <td>Unicode Common Locale Data Repository provides locale-specific patterns for formatting, parsing, spelling aloud, and handling traditional/archiac numbers.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n## Business archetypes defined\n\"A business archetype is a primordial thing that occurs consistently and universally in business domains and business software systems.\" (Arlow & Neustadt, [_Enterprise patterns and MDA: building better software with archetype patterns and UML_](https://www.amazon.com/Enterprise-Patterns-MDA-Building-Archetype/dp/032111230X), 2006, p. 5)\n\n## Explore other business archetype patterns\n[Open a Swagger-UI](http://api.swindle.net/swagger-ui/#/) instance, then copy and paste the following Swagger specification URLs into the \"Explore\" text field and select the \"Explore\" button for additional APIs.\n1. `Locale`: http://api.swindle.net/archetypes/v1/schemas/locale/locale.swagger.json\n2. `Party`: http://api.swindle.net/archetypes/v1/schemas/party/party.swagger.json\n3. `Quantity`: http://api.swindle.net/archetypes/v1/schemas/quantity/quantity.swagger.json\n---\n## About",
    "version": "1.0.0",
    "title": "Quantity",
    "contact": {
      "name": "Greg Swindle",
      "url": "https://github.com/gregswindle"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.swindle.net",
  "basePath": "/archetypes/v1/quantities",
  "tags": [
    {
      "name": "Systems Of Units",
      "description": "Represents a set of related Units defined by a standard such as SI."
    },
    {
      "name": "SI (International System of Units)",
      "description": "Standard weights and measures maintained by SI."
    },
    {
      "name": "Labor",
      "description": "Contains a set of labor-related measures, e.g., WorkHour."
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "externalDocs": {
    "description": "Enterprise patterns and MDA: building better software with archetype patterns and UML",
    "url": "https://www.amazon.com/Enterprise-Patterns-MDA-Building-Archetype/dp/032111230X"
  },
  "paths": {
    "/systems-of-units": {
      "get": {
        "tags": [
          "Systems Of Units"
        ],
        "summary": "Retrieve all systems of units.",
        "description": "Retrieve a list of all `SystemOfUnits`.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "getSystemsOfUnits",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Systems Of Units"
        ],
        "summary": "Create an new SystemOfUnits.",
        "description": "Create an new `SystemOfUnits`.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "createSystemOfUnits",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The `SystemOfUnits` to be added.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      }
    },
    "/systems-of-units/{name-of-system}": {
      "get": {
        "tags": [
          "Systems Of Units"
        ],
        "summary": "Retrieve a specific system of units by name.",
        "description": "Retrieve a specific `SystemOfUnits` using its `nameOfSystem` property's _case-sensitive_ value.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "getSystemOfUnitsByName",
        "parameters": [
          {
            "in": "path",
            "name": "name-of-system",
            "description": "The name of the system of units, e.g., \"SI\" for the International System of Units (SI). <br><br>**Case-sensitivity**: `name-of-system's` value is **case-sensitive**. For example, \"SI\" will return data, but lower-case \"si\" will result in an HTTP status code of 404 (`NotFoundError`).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "http://api.swindle.net/archetypes/v1/schemas/quantity/system-of-units.schema.json"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      }
    },
    "/systems-of-units/SI/base-units/{name}": {
      "get": {
        "tags": [
          "SI (International System of Units)"
        ],
        "summary": "Retrieve a metric or unit by its SI name.",
        "description": "Retrieve a specific `SiBaseUnit` using its `name` property's _case-sensitive_ value.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "getSiBaseUnitByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The `name` of the `SiBaseUnit`, e.g., \"`metric`\".<br><br>**Case-sensitivity**: `name's` value is **case-sensitive**. For example, \"`ampere`\" will return data, but capitalized \"`Meter`\" will result in an HTTP status code of 404 (`NotFoundError`).",
            "required": true,
            "type": "string",
            "enum": [
              "ampere",
              "candela",
              "kelvin",
              "kilogram",
              "meter",
              "mole",
              "second"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SiBaseUnit"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      }
    },
    "/systems-of-units/labor": {
      "post": {
        "tags": [
          "Labor"
        ],
        "summary": "Create an new Unit of Labor.",
        "description": "Create an new `Unit` of Labor. <br><br>**Standards for `name` assignments.**<br><br>When creating a new `Unit`, follow these rules for the value of `Unit's` `name` property:<ul><li>**Use lower case**: `name's` value SHOULD be in lower case.<li>**Format with [**kebab case**](https://runkit.com/gregswindle/59a1c3805d3740001245a72d)**: `name's` value SHOULD be given in [**kebab case**](https://runkit.com/gregswindle/59a1c3805d3740001245a72d). ",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "createLaborUnit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new `Unit` object to be added.<br><br>**Important**: The `name` of the labor `Unit`, i.e., \"`work-hour`\".<ul><li>**Case-sensitivity**: `name's` value is **case-sensitive**. For example, \"`work-hour`\" will return data, but \"Work-Hour\" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**: `name's` value must be given in [**kebab case**](https://runkit.com/gregswindle/59a1c3805d3740001245a72d). For example, \"`work-hour`\" will return data, but \"work hour\" (with whitespace) or \"`WorkHour`\" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will result in an HTTP status code of 404 (`NotFoundError`).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      }
    },
    "/systems-of-units/labor/{name}": {
      "get": {
        "tags": [
          "Labor"
        ],
        "summary": "Retrieve a metric or unit by name.",
        "description": "The `name` of the labor `Unit`, i.e., \"`work-hour`\".<ul><li>**Case-sensitivity**: `name's` value is **case-sensitive**. For example, \"`work-hour`\" will return data, but \"Work-Hour\" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**: `name's` value must be given in [**kebab case**](https://runkit.com/gregswindle/59a1c3805d3740001245a72d). For example, \"`work-hour`\" will return data, but \"work hour\" (with whitespace) or \"`WorkHour`\" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will result in an HTTP status code of 404 (`NotFoundError`).",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "operationId": "getLaborUnitByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The `name` of the labor `Unit`, i.e., \"`work-hour`\".<ul><li>**Case-sensitivity**: `name's` value is **case-sensitive**. For example, \"`work-hour`\" will return data, but \"Work-Hour\" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**: `name's` value must be given in [**kebab case**](https://runkit.com/gregswindle/59a1c3805d3740001245a72d). For example, \"`work-hour`\" will return data, but \"work hour\" (with whitespace) or \"`WorkHour`\" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will result in an HTTP status code of 404 (`NotFoundError`).",
            "required": true,
            "type": "string",
            "enum": [
              "work-hour"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "405": {
            "description": "Method Not Allowed. ",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "SystemOfUnits": {
      "$ref": "http://api.swindle.net/archetypes/v1/schemas/quantity/system-of-units.schema.json"
    },
    "Metric": {
      "$ref": "http://api.swindle.net/archetypes/v1/schemas/quantity/metric.schema.json"
    },
    "Unit": {
      "allOf": [
        {
          "$ref": "#/definitions/Metric"
        },
        {
          "properties": {
            "systemOfUnits": {
              "$ref": "http://api.swindle.net/archetypes/v1/schemas/quantity/system-of-units.schema.json"
            }
          }
        },
        {
          "description": "Represents a type of `Metric` that is part of a `SystemOfUnits`."
        },
        {
          "title": "Unit"
        }
      ]
    },
    "DerivedUnitTerm": {
      "allOf": [
        {
          "$ref": "#/definitions/Unit"
        },
        {
          "description": "Represents part of a DerivedUnit comprising a single Unit and its power."
        },
        {
          "properties": {
            "power": {
              "description": "Describes part of a `DerivedUnit` comprising a single `Unit` and its power.",
              "type": "integer"
            },
            "unit": {
              "$ref": "#/definitions/Unit"
            }
          }
        },
        {
          "title": "DerivedUnitTerm"
        }
      ]
    },
    "DerivedUnit": {
      "allOf": [
        {
          "$ref": "#/definitions/Unit"
        },
        {
          "description": "Represents a combination of one or more base Units according to a specific equation."
        },
        {
          "properties": {
            "terms": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DerivedUnitTerm"
              }
            }
          }
        },
        {
          "title": "DerivedUnit"
        }
      ]
    },
    "RoundingStrategy": {
      "type": "number",
      "enum": [
        "ROUND_UP",
        "ROUND_DOWN",
        "ROUND",
        "ROUND_UP_BY_STEP",
        "ROUND_DOWN_BY_STEP",
        "ROUND_TOWARDS_POSITIVE",
        "ROUND_TOWARDS_NEGATIVE"
      ],
      "description": "\nAn enum that represents an aspect of a RoundingPolicy that determines the type of rounding to be applied. Allowed values are:\n* **ROUND_UP** - Rounds a number to the specified numberOfDigits, moving its value away from zero.\n\n* **ROUND_DOWN** - Rounds a number to the specified numberOfDigits, moving its value towards zero, thereby truncating the number at the specified precision.\n\n* **ROUND** - Behaves like ROUND_UP if the digit following the specified numberOfDigits is greater than or equal to the specified roundingDigit; otherwise, behaves like ROUND_DOWN. Note that the most common roundingDigit is 5.\n\n* **ROUND_UP_BY_STEP** - Rounds a number up to the nearest multiple of the specified `roundingStep`, moving its value away from zero. This allows numbers to be rounded in specific steps--e.g., if prices are to rounded up to the nearest 25 cents. **Note:** A `numberOfDigits` value is not required with `ROUND_UP_BY_STEP`, since `ROUND_UP_BY_STEP` also dictates the decimal precision.\n\n* **ROUND_DOWN_BY_STEP** - Rounds a number down to the nearest multiple of the specified `roundingStep`, moving its value towards zero. This allows numbers to be rounded in specific steps--e.g., if prices are to rounded up to the nearest 25 cents. **Note:** A `numberOfDigits` value is not required with `ROUND_DOWN_BY_STEP`, since `ROUND_DOWN_BY_STEP` also dictates the decimal precision.\n\n* **ROUND_TOWARDS_POSITIVE** - Behaves like `ROUND_UP` for _positive_ numbers and like `ROUND_DOWN` for _negative_ numbers.\n\n* **ROUND_TOWARDS_NEGATIVE** - Behaves like `ROUND_UP` for _negative_ numbers and like `ROUND_DOWN` for _positive_ numbers."
    },
    "RoundingPolicy": {
      "description": "Determines the mathematical semantics of the Quantity archetype's round() operation.",
      "type": "object",
      "properties": {
        "numberOfDigits": {
          "description": "The number of digits before or after the decimal place.",
          "type": "integer"
        },
        "roundingDigit": {
          "description": "A test digit with which a digit within the number being rounded is compared.",
          "type": "integer"
        },
        "roundingStep": {
          "description": "The multiple to which you want to round. E.g., to round a price of $3.1412 to an accuracy of five (5) cents, use a `roundingStep` of `0.05`.",
          "type": "number"
        },
        "roundingStrategy": {
          "type": "number",
          "enum": [
            "ROUND_UP",
            "ROUND_DOWN",
            "ROUND",
            "ROUND_UP_BY_STEP",
            "ROUND_DOWN_BY_STEP",
            "ROUND_TOWARDS_POSITIVE",
            "ROUND_TOWARDS_NEGATIVE"
          ]
        }
      }
    },
    "Quantity": {
      "description": "Represents an amount measured in some Metric.",
      "type": "object",
      "properties": {
        "amount": {
          "description": "The total of a thing or things in number, size, value, or extent.",
          "type": "number",
          "default": 0
        },
        "metric": {
          "$ref": "#/definitions/Metric"
        },
        "roundingPolicy": {
          "$ref": "#/definitions/RoundingPolicy"
        }
      }
    },
    "WorkHour": {
      "allOf": [
        {
          "$ref": "#/definitions/Unit"
        },
        {
          "properties": {
            "systemOfUnits": {
              "$ref": "#/definitions/SystemOfUnits"
            }
          }
        },
        {
          "description": "Represents an amount of work corresponding to one Person working for one hour."
        }
      ]
    },
    "SiSystemOfUnits": {
      "$ref": "http://api.swindle.net/archetypes/v1/schemas/quantity/si-system-of-units.schema.json"
    },
    "SiBaseUnit": {
      "allOf": [
        {
          "$ref": "#/definitions/Unit"
        },
        {
          "description": "Represents one of the based units defined in the International System of Units (SI)."
        },
        {
          "properties": {
            "systemOfUnits": {
              "$ref": "#/definitions/SiSystemOfUnits"
            }
          }
        },
        {
          "title": "SiBaseUnit"
        }
      ]
    },
    "Meter": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of length."
        },
        {
          "properties": {
            "name": {
              "default": "meter"
            },
            "symbol": {
              "default": "m"
            },
            "definition": {
              "default": "The meter is the length of the path travelled by light in vacuum during a time interval of 1/299792458th of a second."
            }
          }
        },
        {
          "title": "Meter"
        }
      ]
    },
    "Second": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of time."
        },
        {
          "properties": {
            "name": {
              "default": "second"
            },
            "symbol": {
              "default": "s"
            },
            "definition": {
              "default": "The second is the duration of 9,192,631,770 (9.192631770 x 10⁹) cycles of the radiation produced by the transition between two levels of the cesium 133 atom."
            }
          }
        },
        {
          "title": "Second"
        }
      ]
    },
    "Ampere": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of electric current."
        },
        {
          "properties": {
            "name": {
              "default": "ampere"
            },
            "symbol": {
              "default": "A"
            },
            "definition": {
              "default": "The ampere is that current which, if maintained in each of two infinitely long parallel wires separated by one meter in free space, would produce a force between the two wires (due to their magnetic fields) of 2 x 10⁻⁷ newtons for each meter of length. The SI unit of electric resistance is the ohm (Ω). 1 Ω = 1 V/A."
            }
          }
        },
        {
          "title": "Ampere"
        }
      ]
    },
    "Kelvin": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of thermodynamic temperature."
        },
        {
          "properties": {
            "name": {
              "default": "kelvin"
            },
            "symbol": {
              "default": "K"
            },
            "definition": {
              "default": "The Kelvin (K) is the fraction 1/273.16 of the thermodynamic temperature of the triple point of water."
            }
          }
        },
        {
          "title": "Kelvin"
        }
      ]
    },
    "Mole": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of amount of substance."
        },
        {
          "properties": {
            "name": {
              "default": "mole"
            },
            "symbol": {
              "default": "mol"
            },
            "definition": {
              "default": "The amount of substance of a system that contains as many elementary entities as there are atoms in 0.012 kilogram of carbon 12."
            }
          }
        },
        {
          "title": "Mole"
        }
      ]
    },
    "Candela": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of luminous intensity."
        },
        {
          "properties": {
            "name": {
              "default": "Candela"
            },
            "symbol": {
              "default": "cd"
            },
            "definition": {
              "default": "The luminous intensity, in a given direction, of a source that emits monochromatic radiation of frequency 540 x 1012 hertz (Hz) and that has a radiant intensity in that direction of 1/683 watt per steradian."
            }
          }
        },
        {
          "title": "Candela"
        }
      ]
    },
    "Kilogram": {
      "allOf": [
        {
          "$ref": "#/definitions/SiBaseUnit"
        },
        {
          "description": "A unit of mass."
        },
        {
          "properties": {
            "name": {
              "default": "kilogram"
            },
            "symbol": {
              "default": "kg"
            },
            "definition": {
              "default": "The unit of mass equal to the mass of the international prototype of the kilogram, a platinum-iridium standard that is kept at the International Bureau of Weights and Measures (BIPM). The primary standard of mass for this country is United States Prototype Kilogram 20, which is a platinum-iridium cylinder kept at NIST."
            }
          }
        },
        {
          "title": "Kilogram"
        }
      ]
    },
    "BadRequestError": {
      "allOf": [
        {
          "$ref": "http://api.swindle.net/archetypes/v1/schemas/logging-event/error-response/400.schema.json"
        },
        {
          "description": "400 Bad Request. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
        }
      ]
    },
    "UnauthorizedError": {
      "allOf": [
        {
          "$ref": "http://api.swindle.net/archetypes/v1/schemas/logging-event/error-response/401.schema.json"
        },
        {
          "description": "401 Unauthorized. The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information."
        }
      ]
    },
    "ForbiddenError": {
      "allOf": [
        {
          "$ref": "http://api.swindle.net/archetypes/v1/schemas/logging-event/error-response/403.schema.json"
        },
        {
          "description": "403 Forbidden. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
        }
      ]
    },
    "NotFoundError": {
      "allOf": [
        {
          "$ref": "http://api.swindle.net/archetypes/v1/schemas/logging-event/error-response/404.schema.json"
        },
        {
          "description": "404 Not Found. The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
        }
      ]
    },
    "MethodNotAllowedError": {
      "allOf": [
        {
          "$ref": "http://api.swindle.net/archetypes/v1/schemas/logging-event/error-response/405.schema.json"
        },
        {
          "description": "405 Method Not Allowed. The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource."
        }
      ]
    }
  }
}