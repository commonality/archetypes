/**
 * Locale
 *  <img height=\"100\" width=\"100\" src=\"/archetypes/v1/img/logo-commonalaxy.png.png\" alt=\"OpenAPI 2.0 Business Archetypes\"> ## `Locale` The `Locale` archetype represents a general notion of place, location, or context.  `Locales` can represent contexts that don't correspond to real places or locations. For example, you could extend `Locale` with a `LoyaltyProgramCode` that represents an airline's or supermarket's loyalty card program. ## `IsoCountryCode` `IsoCountryCode` extends `Locale` to provide a country defined in [ISO 3166](https://www.iso.org/iso-3166-country-codes.html).  ## Standards compliance <table>   <thead>     <tr><th>Standard</th><th>Contents</th></tr>   </thead>   <tfoot>   </tfoot>   <tbody>     <tr>       <td><a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a></td>       <td>International Standard for country codes and codes for their subdivisions.</td>     </tr>     <tr>       <td><a href=\"http://cldr.unicode.org/\">Unicode CLDR</a></td>       <td>Unicode Common Locale Data Repository provides localization support for the world's languages.</td>     </tr>   </tbody> </table>   ---   ## Business archetypes defined \"A business archetype is a primordial thing that occurs consistently and universally in business domains and business software systems.\" (Arlow & Neustadt, [_Enterprise patterns and MDA: building better software with archetype patterns and UML_](https://www.amazon.com/Enterprise-Patterns-MDA-Building-Archetype/dp/032111230X), 2006, p. 5)  ## Explore other business archetype patterns [Open a Swagger-UI](http://api.swindle.net/swagger-ui/#/) instance, then copy and paste the following Swagger specification URLs into the \"Explore\" text field and select the \"Explore\" button for additional APIs. 1. `Locale`: http://api.swindle.net/archetypes/v1/schemas/locales/locales.swagger.json 2. `Party`: http://api.swindle.net/archetypes/v1/schemas/parties/parties.swagger.json 3. `Quantity`: http://api.swindle.net/archetypes/v1/schemas/quantities/quantities.swagger.json  --- ## About
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Locale);
  }
}(this, function(expect, Locale) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Locale.ISOCountryCodesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ISOCountryCodesApi', function() {
    describe('getIsoCountryCodeById', function() {
      it('should call getIsoCountryCodeById successfully', function(done) {
        //uncomment below and update the code to test getIsoCountryCodeById
        //instance.getIsoCountryCodeById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIsoCountryCodes', function() {
      it('should call getIsoCountryCodes successfully', function(done) {
        //uncomment below and update the code to test getIsoCountryCodes
        //instance.getIsoCountryCodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
